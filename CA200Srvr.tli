//           GENERATED SOURCE FILE - DO NOT EDIT                  
//                                                                
// This source file was generated by the Borland C++ compiler     
// in response to a #import directive for the type library :      
// 		C                                                         
//                                                                
#pragma once                                                      

//
// Interface ICa200 wrapper methods:
//

inline struct ICas* ICa200::GetCas( )
{
  struct ICas* _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa200::SetConfiguration(
    long CaNumberVal,
    BSTR ConnecStringVal,
    long PortVal,
    long BaudRateVal )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008\x0003\x0003", CaNumberVal, ConnecStringVal, PortVal, BaudRateVal );
}

inline HRESULT ICa200::AutoConnect( )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline struct ICa* ICa200::GetSingleCa( )
{
  struct ICa* _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

//
// Interface ICas wrapper methods:
//

inline struct ICa* ICas::GetItem(
    VARIANT IndexVal )
{
  struct ICa* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c", IndexVal);
  return _result;
}

inline long ICas::GetCount( )
{
  long _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICas::SendMsr( )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICas::ReceiveMsr( )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline struct ICa* ICas::GetItemOfNumber(
    long CaNumberVal )
{
  struct ICa* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", CaNumberVal);
  return _result;
}

inline HRESULT ICas::SetCaID(
    long CaNumberVal,
    BSTR CaIDVal )
{
  return _com_dispatch_method( this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", CaNumberVal, CaIDVal );
}

//
// Interface ICa wrapper methods:
//

inline struct IProbes* ICa::GetProbes( )
{
  struct IProbes* _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IOutputProbes* ICa::GetOutputProbes( )
{
  struct IOutputProbes* _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline struct IMemory* ICa::GetMemory( )
{
  struct IMemory* _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline BSTR ICa::GetDisplayProbe( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT ICa::PutDisplayProbe(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline struct IProbe* ICa::GetSingleProbe( )
{
  struct IProbe* _result;
  _com_dispatch_method( this, 0x5, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline float ICa::GetSyncMode( )
{
  float _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutSyncMode(
    float rhs )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0004", rhs );
}

inline long ICa::GetDisplayMode( )
{
  long _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutDisplayMode(
    long rhs )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline long ICa::GetDisplayDigits( )
{
  long _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutDisplayDigits(
    long rhs )
{
  return _com_dispatch_method( this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline long ICa::GetAveragingMode( )
{
  long _result;
  _com_dispatch_method( this, 0x9, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutAveragingMode(
    long rhs )
{
  return _com_dispatch_method( this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline long ICa::GetBrightnessUnit( )
{
  long _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutBrightnessUnit(
    long rhs )
{
  return _com_dispatch_method( this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline BSTR ICa::GetCAType( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ICa::GetCAVersion( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline long ICa::GetNumber( )
{
  long _result;
  _com_dispatch_method( this, 0xe, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR ICa::GetPortID( )
{
  BSTR _result;
  _com_dispatch_method( this, 0xf, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline BSTR ICa::GetID( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x10, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT ICa::PutID(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline HRESULT ICa::CalZero( )
{
  return _com_dispatch_method( this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::Measure(
    long newVal )
{
  return _com_dispatch_method( this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", newVal );
}

inline HRESULT ICa::SetAnalyzerCalMode( )
{
  return _com_dispatch_method( this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::Enter( )
{
  return _com_dispatch_method( this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::SetAnalogRange(
    float Range1Val,
    float Range2Val )
{
  return _com_dispatch_method( this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0004\x0004", Range1Val, Range2Val );
}

inline HRESULT ICa::SetPWROnStatus( )
{
  return _com_dispatch_method( this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline long ICa::GetCalStandard( )
{
  long _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT ICa::PutCalStandard(
    long rhs )
{
  return _com_dispatch_method( this, 0x22, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline HRESULT ICa::ResetAnalyzerCalMode( )
{
  return _com_dispatch_method( this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::SetLvxyCalMode( )
{
  return _com_dispatch_method( this, 0x24, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::ResetLvxyCalMode( )
{
  return _com_dispatch_method( this, 0x25, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline HRESULT ICa::SetAnalyzerCalData(
    long ColorVal )
{
  return _com_dispatch_method( this, 0x26, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", ColorVal );
}

inline HRESULT ICa::SetDisplayProbe(
    long ProbeNumberVal )
{
  return _com_dispatch_method( this, 0x27, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", ProbeNumberVal );
}

inline HRESULT ICa::SetLvxyCalData(
    long ColorVal,
    float XVal,
    float YVal,
    float LvVal )
{
  return _com_dispatch_method( this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0004\x0004\x0004", ColorVal, XVal, YVal, LvVal );
}

inline HRESULT ICa::PutRemoteMode(
    long rhs )
{
  return _com_dispatch_method( this, 0x29, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline HRESULT ICa::SetFMAAnalogRange(
    float RangeVal )
{
  return _com_dispatch_method( this, 0x2a, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0004", RangeVal );
}

inline HRESULT ICa::GetAnalogRange(
    float* Range1Val,
    float* Range2Val )
{
  return _com_dispatch_method( this, 0x2b, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4004\x4004", Range1Val, Range2Val );
}

inline HRESULT ICa::GetFMAAnalogRange(
    float* RangeVal )
{
  return _com_dispatch_method( this, 0x2c, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x4004", RangeVal );
}

//
// Interface IProbes wrapper methods:
//

inline struct IProbe* IProbes::GetItem(
    VARIANT IndexVal )
{
  struct IProbe* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c", IndexVal);
  return _result;
}

inline long IProbes::GetCount( )
{
  long _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline struct IProbe* IProbes::GetItemOfNumber(
    long ProbeNumber )
{
  struct IProbe* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", ProbeNumber);
  return _result;
}

inline HRESULT IProbes::SetProbeID(
    long ProbeNumberVal,
    BSTR ProbeIDVal )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", ProbeNumberVal, ProbeIDVal );
}

//
// Interface IProbe wrapper methods:
//

inline float IProbe::GetX( )
{
  float _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetY( )
{
  float _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetZ( )
{
  float _result;
  _com_dispatch_method( this, 0x3, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetFlckrJEITA( )
{
  float _result;
  _com_dispatch_method( this, 0x4, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetNumber( )
{
  long _result;
  _com_dispatch_method( this, 0x5, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline BSTR IProbe::GetID( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IProbe::PutID(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline BSTR IProbe::GetSerialNO( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x7, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline float IProbe::GetLv( )
{
  float _result;
  _com_dispatch_method( this, 0xa, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::Getud( )
{
  float _result;
  _com_dispatch_method( this, 0xb, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::Getvd( )
{
  float _result;
  _com_dispatch_method( this, 0xc, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetT( )
{
  long _result;
  _com_dispatch_method( this, 0xd, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetdEUser( )
{
  float _result;
  _com_dispatch_method( this, 0x11, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetFlckrFMA( )
{
  float _result;
  _com_dispatch_method( this, 0x15, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::Getsy( )
{
  float _result;
  _com_dispatch_method( this, 0x16, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::Getsx( )
{
  float _result;
  _com_dispatch_method( this, 0x17, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::Getduv( )
{
  float _result;
  _com_dispatch_method( this, 0x18, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetusUser( )
{
  float _result;
  _com_dispatch_method( this, 0x19, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetvsUser( )
{
  float _result;
  _com_dispatch_method( this, 0x1a, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetLsUser( )
{
  float _result;
  _com_dispatch_method( this, 0x1b, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetLvfL( )
{
  float _result;
  _com_dispatch_method( this, 0x1d, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetR( )
{
  float _result;
  _com_dispatch_method( this, 0x1e, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetG( )
{
  float _result;
  _com_dispatch_method( this, 0x1f, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetB( )
{
  float _result;
  _com_dispatch_method( this, 0x20, DISPATCH_METHOD , VT_R4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetRD( )
{
  long _result;
  _com_dispatch_method( this, 0x21, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetRAD( )
{
  long _result;
  _com_dispatch_method( this, 0x22, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetRFMA( )
{
  long _result;
  _com_dispatch_method( this, 0x23, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline long IProbe::GetRJEITA( )
{
  long _result;
  _com_dispatch_method( this, 0x24, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline float IProbe::GetSpectrum(
    long Frequency )
{
  float _result;
  _com_dispatch_method( this, 0x25, DISPATCH_METHOD , VT_R4, (void*)&_result, L"\x0003", Frequency);
  return _result;
}

//
// Interface IOutputProbes wrapper methods:
//

inline struct IProbe* IOutputProbes::GetItem(
    VARIANT ProbeIndexVal )
{
  struct IProbe* _result;
  _com_dispatch_method( this, 0x0, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x000c", ProbeIndexVal);
  return _result;
}

inline long IOutputProbes::GetCount( )
{
  long _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IOutputProbes::Add(
    BSTR ProbeIDVal )
{
  return _com_dispatch_method( this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", ProbeIDVal );
}

inline struct IProbe* IOutputProbes::GetItemOfNumber(
    long ProbeNumberVal )
{
  struct IProbe* _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, L"\x0003", ProbeNumberVal);
  return _result;
}

inline HRESULT IOutputProbes::AddAll( )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

inline struct IOutputProbes* IOutputProbes::Clone( )
{
  struct IOutputProbes* _result;
  _com_dispatch_method( this, 0x8, DISPATCH_METHOD , VT_USERDEFINED, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IOutputProbes::RemoveAll( )
{
  return _com_dispatch_method( this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IMemory wrapper methods:
//

inline long IMemory::GetChannelNO( )
{
  long _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

inline HRESULT IMemory::PutChannelNO(
    long rhs )
{
  return _com_dispatch_method( this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003", rhs );
}

inline BSTR IMemory::GetChannelID( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline HRESULT IMemory::PutChannelID(
    BSTR rhs )
{
  return _com_dispatch_method( this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", rhs );
}

inline HRESULT IMemory::GetReferenceColor(
    BSTR ProbeIDVal,
    float* XVal,
    float* YVal,
    float* LvVal )
{
  return _com_dispatch_method( this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008\x4004\x4004\x4004", ProbeIDVal, XVal, YVal, LvVal );
}

inline HRESULT IMemory::SetChannelID(
    BSTR ChannelIDVal )
{
  return _com_dispatch_method( this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0008", ChannelIDVal );
}

inline HRESULT IMemory::GetMemoryStatus(
    long ProbeNOVal,
    long* CalProbeSNOVal,
    long* RefProbeSNOVal,
    long* CalModeVal )
{
  return _com_dispatch_method( this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x4003\x4003\x4003", ProbeNOVal, CalProbeSNOVal, RefProbeSNOVal, CalModeVal );
}

inline long IMemory::CheckCalData(
    long ProbeNOVal,
    BSTR FileNameVal )
{
  long _result;
  _com_dispatch_method( this, 0x6, DISPATCH_METHOD , VT_I4, (void*)&_result, L"\x0003\x0008", ProbeNOVal, FileNameVal);
  return _result;
}

inline HRESULT IMemory::CopyToFile(
    long ProbeNOVal,
    BSTR FileNameVal )
{
  return _com_dispatch_method( this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", ProbeNOVal, FileNameVal );
}

inline HRESULT IMemory::CopyFromFile(
    long ProbeNOVal,
    BSTR FileNameVal )
{
  return _com_dispatch_method( this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL,  L"\x0003\x0008", ProbeNOVal, FileNameVal );
}

//
// Interface _ICaEvents wrapper methods:
//

inline HRESULT _ICaEvents::ExeCalZero( )
{
  return _com_dispatch_method( this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL,  0 );
}

//
// Interface IProbeInfo wrapper methods:
//

inline BSTR IProbeInfo::GetTypeName( )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, NULL);
  return _bstr_t( _result, false ) ;
}

inline long IProbeInfo::GetTypeNO( )
{
  long _result;
  _com_dispatch_method( this, 0x2, DISPATCH_METHOD , VT_I4, (void*)&_result, NULL);
  return _result;
}

//
// Interface ICaOption wrapper methods:
//

inline BSTR ICaOption::Command(
    BSTR CommandVal )
{
  BSTR _result;
  _com_dispatch_method( this, 0x1, DISPATCH_METHOD , VT_BSTR, (void*)&_result, L"\x0008", CommandVal);
  return _bstr_t( _result, false ) ;
}
